crystal_doc_search_index_callback({"repository_name":"hashr","body":"# hashr\n\nHashr is a tiny class makes test on JSON response easier.\n\nThe name of `hashr` come from the awesome ruby gem [hashr](https://github.com/svenfuchs/hashr), though, AFAIK, use original code is not possible because Crystal very different with Ruby in some aspect.\n\nThis shard should only be used in spec.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     hashr:\n       github: crystal-china/hashr\n   ```\n\n2. Run `shards install`\n\n## Usage\n\nFollowing is a example use graphql + spec-kemal\n\n```crystal\n\nrequire \"hashr\"\nrequire \"../spec_helper\"\n\ndescribe \"daily reports\" do\n  it \"query daily report\" do\n    report = ReportFactory.create\n\n    post_json \"/graphql\", body: {query: \"query { ... }\"}\n\n    p! typeof(response.body)  # => String\n    \n    p! response.body # => \"{\\\"data\\\":{\\\"reportQuery\\\":{\\\"target\\\":{\\\"targetTotalCount\\\":47,\\\"processedTotalCount\\\":44,\\\"qualifiedTotalCount\\\":40}}}}\"\n\n    response_hash = Hash(String, JSON::Any).from_json(response.body) # => Get a hash like this:\n    # {\"data\" => {\n    #                \"reportQuery\" => {\n    #                  \"target\" => {\n    #                    \"targetTotalCount\" => report.target_total_count,\n    #                    \"processedTotalCount\" => report.processed_total_count,\n    #                    \"qualifiedTotalCount\" => report.qualified_total_count\n    #                  }\n    #                }\n    #              }\n    #     }\n    \n    # Instead, verify on the entire response result, we can verify on specified field only.\n    parsed_response = Hashr.new(response)\n\n    # Use nice dot method call.\n    target = parsed_response.data.reportQuery.target\n    \n    target.processedTotalCount.should eq report.processed_total_count\n    target.qualifiedTotalCount.should eq report.qualified_total_count\n  end\nend\n```\n\n## Limit\n\nFor verify a value is nil, you have to use `eq`, `be_nil` not work because Crystal don't allow us redefine #nil? method on any object.\n\n```crystal\nh = {\"nilValue\" => nil}.to_json\nvalue = Hashr.new({\"foo\" => JSON.parse(h)})\n\nvalue.foo.nilValue.should eq nil # => true\nvalue.foo.nilValue.should be_nil    # => false\n```\n\n## Development\n\nTODO: Write development instructions here\n\n## Contributing\n\n1. Fork it (<https://github.com/crystal-china/hashr/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Billy.Zheng](https://github.com/zw963) - creator and maintainer\n","program":{"html_id":"hashr/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"hashr","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"hashr/Hashr","path":"Hashr.html","kind":"class","full_name":"Hashr","name":"Hashr","abstract":false,"superclass":{"html_id":"hashr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"hashr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"hashr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/hashr.cr","line_number":3,"url":"https://github.com/crystal-china/hashr/blob/8523c3a758af9a40db8cc6b4e069abf725d72d97/src/hashr.cr#L3"},{"filename":"src/hashr/version.cr","line_number":1,"url":"https://github.com/crystal-china/hashr/blob/8523c3a758af9a40db8cc6b4e069abf725d72d97/src/hashr/version.cr#L1"}],"repository_name":"hashr","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"{{ (`shards version \\\"/home/runner/work/hashr/hashr/src/hashr\\\"`).chomp.stringify }}"}],"constructors":[{"html_id":"new(json:Hash(String,JSON::Any)|JSON::Any)-class-method","name":"new","abstract":false,"args":[{"name":"json","external_name":"json","restriction":"Hash(String, JSON::Any) | JSON::Any"}],"args_string":"(json : Hash(String, JSON::Any) | JSON::Any)","args_html":"(json : Hash(String, JSON::Any) | JSON::Any)","location":{"filename":"src/hashr.cr","line_number":6,"url":"https://github.com/crystal-china/hashr/blob/8523c3a758af9a40db8cc6b4e069abf725d72d97/src/hashr.cr#L6"},"def":{"name":"new","args":[{"name":"json","external_name":"json","restriction":"Hash(String, JSON::Any) | JSON::Any"}],"visibility":"Public","body":"_ = allocate\n_.initialize(json)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other)-instance-method","name":"==","doc":"Returns `false` (other can only be a `Value` here).","summary":"<p>Returns <code>false</code> (other can only be a <code>Value</code> here).</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":""}],"args_string":"(other)","args_html":"(other)","location":{"filename":"src/hashr.cr","line_number":18,"url":"https://github.com/crystal-china/hashr/blob/8523c3a758af9a40db8cc6b4e069abf725d72d97/src/hashr.cr#L18"},"def":{"name":"==","args":[{"name":"other","external_name":"other","restriction":""}],"visibility":"Public","body":"obj == other"}},{"html_id":"obj-instance-method","name":"obj","abstract":false,"location":{"filename":"src/hashr.cr","line_number":4,"url":"https://github.com/crystal-china/hashr/blob/8523c3a758af9a40db8cc6b4e069abf725d72d97/src/hashr.cr#L4"},"def":{"name":"obj","visibility":"Public","body":"@obj"}}],"macros":[{"html_id":"method_missing(key)-macro","name":"method_missing","abstract":false,"args":[{"name":"key","external_name":"key","restriction":""}],"args_string":"(key)","args_html":"(key)","location":{"filename":"src/hashr.cr","line_number":10,"url":"https://github.com/crystal-china/hashr/blob/8523c3a758af9a40db8cc6b4e069abf725d72d97/src/hashr.cr#L10"},"def":{"name":"method_missing","args":[{"name":"key","external_name":"key","restriction":""}],"visibility":"Public","body":"    def \n{{ key.id }}\n\n      value = obj[\n{{ key.id.stringify }}\n]\n\n      Hashr.new(value)\n    \nend\n  \n"}}]}]}})